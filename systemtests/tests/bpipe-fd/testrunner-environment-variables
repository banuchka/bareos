#!/bin/bash
set -e
set -o pipefail
set -u
#
# This test checks whether the environment variables for the bpipe plugin work correctly.
# Both the read- and the writeprogram use the set environment variables
#

TestName="$(basename "$(pwd)")"
export TestName

#shellcheck source=../environment.in
. ./environment

#shellcheck source=../scripts/functions
. "${rscripts}"/functions

start_test

backup_log="${tmp}/log1.out"
restore_log="${tmp}/log2.out"

cat <<END_OF_DATA >$tmp/bconcmds
@$out ${NULL_DEV}
messages


@$out $backup_log
run job=backup-bareos-fd level=Full yes
wait
messages

@$out $backup_log
wait
run job=backup-bareos-fd level=Incremental yes
wait
messages

@$out $restore_log
restore jobid=1 client=bareos-fd all done yes
wait
messages

quit
END_OF_DATA

# Start the bareos daemons
# and run the bconsole commands from ${tmp}/bconcmds
# Further bconsole commands can be executed by "run_bconsole".
run_bconsole

check_two_logs

# validate environment variables in readprogram / writeprogram
expected_output=(
  "BareosClientName" "bpipe-fd-fd" "bpipe-fd-fd" "bpipe-fd-fd"
  "BareosJobId"      "1" "2" "3"
  "BareosJobLevel"   "F" "I" " "
#  "BareosSinceTime"  "0" "$now" "0"
  "BareosJobType"    "B" "B" "R"
)

for ((i = 0; i < ${#expected_output[@]}; i += 4)); do
  key="${expected_output[i + 0]}"
  readprogram_F_value="${expected_output[i + 1]}"
  readprogram_I_value="${expected_output[i + 2]}"
  writeprogram_value="${expected_output[i + 3]}"
  if ! grep -q "${key}='${readprogram_F_value}'" "$tmp/readprogram.F.env"; then
    echo "Environment variable '$key' is wrong in readprogram, expected '${readprogram_F_value}'."
    grep "${key}" "$tmp/readprogram.F.env"
    cat "$tmp/readprogram.F.env"
    exit 2
  fi
  if ! grep -q "${key}='${readprogram_I_value}'" "$tmp/readprogram.I.env"; then
    echo "Environment variable '$key' is wrong in readprogram, expected '${readprogram_I_value}'."
    grep "${key}" "$tmp/readprogram.I.env"
    cat "$tmp/readprogram.I.env"
    exit 2
  fi
  if ! grep -q "${key}='${writeprogram_value}'" "$tmp/writeprogram.env"; then
    echo "Environment variable '$key' is wrong in writeprogram, expected '${writeprogram_value}'."
    grep "${key}" "$tmp/writeprogram.env"
    cat "$tmp/writeprogram.env"
    exit 2
  fi
done


# check the plausibility of the value of BareosSinceTime
source "$tmp/readprogram.I.env"
now=$(date +%s)

timediff=$((now - BareosSinceTime))
if [ $timediff -gt 60 ] ; then
    echo "BareosSinceTime is not plausible:"
    echo "Now: $now BareosSincetime: $BareosSinceTime, diff: $timediff"
    exit 3
fi


end_test
